name: Bootcamp CI - Test Runner

# Run the workflow when commits are pushed on main or when a PR is modified
on:
  push:
    branches:
      - main

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  bootcamp-ci:
    name: CI-Bootcamp
    # Execute the CI on the course's runners
    runs-on:
      group: runners_v1

    env:
      app_name: BootcampDebug

    defaults:
      run:
        working-directory: ./${{ env.base_folder }}

    steps:
      # First step : Checkout the repository on the runner
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of Sonar analysis (if we use Sonar Later)

      # This step removes the current gradle cache to avoid any caching issues
      - name: Remove current gradle cache
        run: rm -rf ~/.gradle

      # Kernel-based Virtual Machine (KVM) is an open source virtualization technology built into Linux. Enabling it allows the Android emulator to run faster.
      #
      # For the bootcamp, the runners already have KVM enabled, so this step is commented out. But for your projects, you will need to uncomment it.
      #- name: Enable KVM group perms
      #  run: |
      #    echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
      #    sudo udevadm control --reload-rules
      #    sudo udevadm trigger --name-match=kvm

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"


      # Caching is a very useful part of a CI, as a workflow is executed in a clean environement every time,
      # this means that one would need to re-download and re-process gradle files for every run. Which is very time consuming.
      #
      # To avoid that, we cache the the gradle folder to reuse it later.
      - name: Retrieve gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      # Load google-services.json and local.properties from the secrets
      - name: Decode secrets
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
          LOCAL_PROPERTIES: ${{ secrets.LOCAL_PROPERTIES }}
        run: |
          echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json
          echo "$LOCAL_PROPERTIES" | base64 --decode > ./local.properties

      - name: Grant execute permission for gradlew
        run: |
          chmod +x ./gradlew

      # Remove the "#" if you want to enforce the formatting check when pushing on your repo
      #- name: KTFmt Check
      #  run: |
      #    # To run the CI with debug informations, add --info
      #    ./gradlew ktfmtCheck

      # This step runs gradle commands to build the application
      - name: Assemble
        run: |
          # To run the CI with debug information, add --info
          ./gradlew assembleDebug lint --parallel --build-cache

      - name: Run tests
        run: |
          # To run the CI with debug information, add --info
          ./gradlew check --parallel --build-cache

      - name: Run instrumentation tests
        # This action assumes that Android sdk is already present inthe runner. Which is true for the bootcamp, but won't be for your own project.
        # If you want to use this CI for your project, replace the following line with: uses: reactivecircus/android-emulator-runner@v2
        uses: RandyLutcavich/android-emulator-runner-without-sdk-setup@v1.0.3
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          avd-name: github
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -skin 1080x1920
          disable-animations: true
          script: ./gradlew connectedCheck --parallel --build-cache

      # This step generates the coverage report which will be used later in the semster for monitoring purposes
      - name: Generate coverage
        run: |
          ./gradlew jacocoTestReport

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: Coverage report
          path: app/build/reports/jacoco/jacocoTestReport

  exercises:
    name: Exercises
    # Execute the CI on the course's runners
    runs-on:
      group: runners_v1

    defaults:
      run:
        working-directory: ./${{ env.base_folder }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Check that userStories.txt exists
        run: stat userStories.txt

      # Couting non-empty lines https://stackoverflow.com/a/114861
      - name: Check that userStories.txt has at least two lines
        run: '[ $(grep -cve "^\s*$" userStories.txt) -ge "2" ]'

