package com.github.se.cyrcle.model.parking.offline

import androidx.room.Dao
import androidx.room.Delete
import androidx.room.Query
import androidx.room.Upsert
import com.github.se.cyrcle.model.parking.Parking

/**
 * Data access object for parkings. It serves as an intermediary between the database and the
 * repository
 *
 * It is not implemented in this project as it is auto generated by Room during compilation. Getters
 * are written in SQLite as string within the query annotation
 */
@Dao
interface ParkingDao {

  /**
   * Insert or update a parking
   *
   * @param parking the parking to insert or update
   */
  @Upsert suspend fun upsert(parking: Parking)

  /**
   * Insert or update a list of parkings
   *
   * @param parkings the list of parkings to insert or update
   */
  @Upsert suspend fun upsertAll(parkings: Set<Parking>)

  /**
   * Delete a parking y it's uid
   *
   * @param uid the parking id to delete
   */
  @Query("DELETE FROM ${Parking.TABLE_NAME} WHERE uid = :uid ") suspend fun delete(uid: String)

  /**
   * Deletes parkings whose UIDs are in the list
   *
   * @param uids the list of UIDs of parkings to delete
   */
  @Query("DELETE FROM ${Parking.TABLE_NAME} WHERE uid IN (:uids) ")
  suspend fun deleteAll(uids: List<String>)

  /**
   * Deletes parkings present in the given tiles
   *
   * @param uids the list of Tiles to delete
   */
  @Query("DELETE FROM ${Parking.TABLE_NAME} WHERE tileUID IN (:uids) ")
  suspend fun deleteAllInTiles(uids: Set<String>)

  /**
   * Delete a parking
   *
   * @param parking the parking to delete
   */
  @Delete suspend fun delete(parking: Parking)

  /**
   * Get a parking by its identifier
   *
   * @param uid the identifier of the tile
   * @return the tile with the given identifier
   */
  @Query("SELECT * FROM ${Parking.TABLE_NAME} WHERE uid = :uid")
  suspend fun getParking(uid: String): Parking?

  /**
   * Get a list of parkings belonging to the tiles
   *
   * @param tileIDs the IDs of the queried tiles
   * @return The parkings belonging to the tiles
   */
  @Query("SELECT * FROM ${Parking.TABLE_NAME} WHERE tileUID IN (:tileIDs)")
  fun getParkingsByTileUIDs(tileIDs: List<String>): List<Parking>
}
